---

- name: configure esxi hosts
  hosts: esxi
  gather_facts: false
  become: true

  tasks:
    - name: Check known_hosts for {{ inventory_hostname }}
      local_action: shell ssh-keygen -F {{ inventory_hostname }}
      register: has_entry_in_known_hosts_file
      changed_when: false
      ignore_errors: true
      delegate_to: "{{ groups['controller'][0] }}"

    - name: Ignore host key for {{ inventory_hostname }} on first run
      when: has_entry_in_known_hosts_file.rc == 1
      set_fact:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      delegate_to: "{{ groups['controller'][0] }}"

    - name: gather facts
      ansible.builtin.gather_facts:
      delegate_to: "{{ groups['controller'][0] }}"

    - name: install epel key
      ansible.builtin.rpm_key:
        state: present
        key: "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}"
      delegate_to: "{{ groups['controller'][0] }}"
      run_once: true

    - name: install epel package
      ansible.builtin.yum:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
        state: present
      delegate_to: "{{ groups['controller'][0] }}"
      run_once: true

    - name: install python pyvmomi for vmware management
      ansible.builtin.package:
        name: python3-pyvmomi
        state: latest
      delegate_to: "{{ groups['controller'][0] }}"
      run_once: true

    - name: Gather info about vmnics of an ESXi Host
      community.vmware.vmware_host_vmnic_info:
        hostname: '{{ inventory_hostname }}'
        username: '{{ esxi_user }}'
        password: '{{ esxi_pass }}'
        esxi_hostname: '{{ inventory_hostname }}'
        validate_certs: false
      delegate_to: "{{ groups['controller'][0] }}"
      register: host_vmnics

    - name: determine the correct vnic to use for intra-cluster communications
      set_fact:
        vmnic: |
          {% for vmnic_detail in host_vmnics.hosts_vmnics_info[inventory_hostname_short + '.'].vmnic_details %}
          {% if vmnic_detail.mac == vmnet_mac %}
          {{ vmnic_detail.device }}
          {% endif %}
          {% endfor %}

    - set_fact:
        vmnic: "{{ vmnic | trim }}"

    - name: Add a VMware vSwitch
      community.vmware.vmware_vswitch:
        hostname: '{{ inventory_hostname }}'
        username: '{{ esxi_user }}'
        password: '{{ esxi_pass }}'
        switch: "{{ vswitch_name }}"
        nics: "{{ vmnic }}"
        mtu: 9000
        validate_certs: false
      delegate_to: "{{ groups['controller'][0] }}"

    - name: Add Management Network VM Portgroup
      community.vmware.vmware_portgroup:
        hostname: "{{ inventory_hostname }}"
        username: "{{ esxi_user }}"
        password: "{{ esxi_pass }}"
        switch: "{{ vswitch_name }}"
        portgroup: "{{ portgroup_name }}"
        hosts: "{{ inventory_hostname }}"
        validate_certs: false
      delegate_to: "{{ groups['controller'][0] }}"

    - name: Add Management vmkernel port using static network type
      community.vmware.vmware_vmkernel:
        hostname: "{{ inventory_hostname }}"
        username: "{{ esxi_user }}"
        password: "{{ esxi_pass }}"
        esxi_hostname: "{{ inventory_hostname }}"
        vswitch_name: "{{ vswitch_name }}"
        portgroup_name: "{{ portgroup_name }}"
        network:
          type: 'static'
          ip_address: "{{ vmnet_ip }}"
          subnet_mask: "{{ vmnet_netmask }}"
        state: present
        enable_ft: true
        enable_mgmt: true
        enable_provisioning: true
        enable_provisioning: true
        enable_replication: true
        enable_replication_nfc: true
        enable_vmotion: true
        enable_vsan: true
        validate_certs: false
      delegate_to: "{{ groups['controller'][0] }}"

...
